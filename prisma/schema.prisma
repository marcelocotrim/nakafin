// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model User {
//   id        String   @id @default(cuid()) @map("_id")
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   name      String
//   email     String
//   password  String
//   events    Event[]
// }

model Person {
  id          String   @id @default(cuid()) @map("_id")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  phoneNumber String
  companyName String
  events      Event[]
}

type Menu {
  title               String
  sections            Section[]
  priceWithAlcohol    Float
  priceWithoutAlcohol Float
}

type Section {
  title String
  items Item[]
}

type Item {
  name        String
  description String?
  price       Float?
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
}

model Event {
  id                             String      @id @default(cuid()) @map("_id")
  createdAt                      DateTime    @default(now())
  updatedAt                      DateTime    @updatedAt
  status                         EventStatus @default(DRAFT)
  title                          String?
  description                    String?
  price                          Float?
  priceWithServiceFee            Float?
  serviceFee                     Float?
  total                          Float?
  totalWithServiceFee            Float?
  discount                       Float?
  totalWithServiceFeeAndDiscount Float?
  date                           DateTime
  locationId                     String?
  location                       Location?   @relation(fields: [locationId], references: [id])
  participantsQuantity           Int?
  contractor                     Person?     @relation(fields: [contractorId], references: [id])
  contractorId                   String?
  menu                           Json?
  userId                         String?
  user                           User?       @relation(fields: [userId], references: [id])

  @@map("event")
}

model Location {
  id        String     @id @default(cuid()) @map("_id")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  parentId  String?
  parent    Location?  @relation("LocationToLocation", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Location[] @relation("LocationToLocation")
  event     Event[]
  capacity  Int?

  @@index([parentId])
  @@map("location")
}

model User {
  id            String    @id @map("_id")
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?
  events     Event[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
